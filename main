import cv2
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import image as mpimg

# Load input image
input_image_path = 'uk.jpg'
image = cv2.imread(input_image_path)

# Set the scaling factor and output size
scale_factor = 10
height, width = image.shape[:2]
new_height, new_width = int(height * scale_factor), int(width * scale_factor)

# Nearest Neighbour Interpolation
nearest_neighbor = cv2.resize(image, (new_width, new_height), interpolation=cv2.INTER_NEAREST)
cv2.imwrite('nearest_neighbor.jpg', nearest_neighbor)

# Bilinear Interpolation
bilinear = cv2.resize(image, (new_width, new_height), interpolation=cv2.INTER_LINEAR)
cv2.imwrite('bilinear.jpg', bilinear)

# Bicubic Spline Interpolation
bicubic_spline = cv2.resize(image, (new_width, new_height), interpolation=cv2.INTER_CUBIC)
cv2.imwrite('bicubic_spline.jpg', bicubic_spline)

# Generalized Bicubic Interpolation (Lanczos4)
generalized_bicubic = cv2.resize(image, (new_width, new_height), interpolation=cv2.INTER_LANCZOS4)
cv2.imwrite('generalized_bicubic.jpg', generalized_bicubic)


#combination of all the methods

al = cv2.resize(image, (new_width, new_height), interpolation = cv2.INTER_NEAREST)
cv2.imwrite('1.jpg', al)
all1 = cv2.imread('1.jpg')
al1 = cv2.resize(all1, (new_width, new_height), interpolation = cv2.INTER_LINEAR)
cv2.imwrite('2.jpg', al1)
all2 = cv2.imread('2.jpg')
al2 = cv2.resize(all2, (new_width, new_height), interpolation = cv2.INTER_CUBIC)
cv2.imwrite('3.jpg', al2)
all3 = cv2.imread('3.jpg')
al3 = cv2.resize(all3, (new_width, new_height), interpolation = cv2.INTER_LANCZOS4)
cv2.imwrite('all.jpg', al3)

im1 = mpimg.imread("uk.jpg")

im2 = mpimg.imread('nearest_neighbor.jpg')

im3 = mpimg.imread('bilinear.jpg')


im4 = mpimg.imread('bicubic_spline.jpg')
im5 = mpimg.imread('generalized_bicubic.jpg')
im6 = mpimg.imread('all.jpg')

fig, axs = plt.subplots(3, 2)
axs[0, 0].imshow(im1)
axs[0, 0].set_title('No Upscaling')
axs[0,1].imshow(im2)
axs[0, 1].set_title('Nearest Neighbor')
axs[1,0].imshow(im3)
axs[1, 0].set_title('Bilinear')
axs[1,1].imshow(im4)
axs[1, 1].set_title('bicubic spline')
axs[2,0].imshow(im5)
axs[2, 0].set_title('generalised bicubic')
axs[2,1].imshow(im6)
axs[2, 1].set_title('all')

# Hide x labels and tick labels for top plots and y ticks for right plots.
for ax in axs.flat:
    ax.label_outer()

plt.show()

from sentence_transformers import SentenceTransformer, util
from PIL import Image
import glob
import os

model = SentenceTransformer('clip-ViT-B-32')

# Next we compute the embeddings
# To encode an image, you can use the following code:
# from PIL import Image
# encoded_image = model.encode(Image.open(filepath))
image_names = ['all.jpg', 'generalized_bicubic.jpg', 'bicubic_spline.jpg', 'bilinear.jpg', "uk.jpg", 'nearest_neighbor.jpg' ]
print("Images:", len(image_names))
encoded_image = model.encode([Image.open(filepath) for filepath in image_names], batch_size=128, convert_to_tensor=True, show_progress_bar=True)

# Now we run the clustering algorithm. This function compares images aganist
# all other images and returns a list with the pairs that have the highest
# cosine similarity score
processed_images = util.paraphrase_mining_embeddings(encoded_image)
NUM_SIMILAR_IMAGES = 10



print('Finding near duplicate images...')
# Use a threshold parameter to identify two images as similar. By setting the threshold lower,
# you will get larger clusters which have less similar images in it. Threshold 0 - 1.00
# A threshold of 1.00 means the two images are exactly the same. Since we are finding near
# duplicate images, we can set it at 0.99 or any number 0 < X < 1.00.
near_duplicates = [image for image in processed_images if image[0] < 80]

for score, image_id1, image_id2 in near_duplicates[0:NUM_SIMILAR_IMAGES]:
    print("\nScore: {:.3f}%".format(score * 100))
    print(image_names[image_id1])
    print(image_names[image_id2])
